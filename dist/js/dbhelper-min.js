const RESTAURANT_DB="restaurant_finder",RESTAURANT_OS="restaurants",REVIEW_OS="reviews",OFFLINE_REVIEW_OS="offline_reviews",OFFLINE_FAVORITE_OS="offline_favorite";let dbPromise;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static openIndexDB(){"indexedDB"in window?dbPromise=idb.open(RESTAURANT_DB,1,e=>{console.log("making a new object store"),e.objectStoreNames.contains(RESTAURANT_OS)||e.createObjectStore(RESTAURANT_OS,{keyPath:"id"}),e.objectStoreNames.contains(REVIEW_OS)||e.createObjectStore(REVIEW_OS,{keyPath:"id"}),e.objectStoreNames.contains(OFFLINE_REVIEW_OS)||e.createObjectStore(OFFLINE_REVIEW_OS,{keyPath:"id",autoIncrement:!0}),e.objectStoreNames.contains(OFFLINE_FAVORITE_OS)||e.createObjectStore(OFFLINE_FAVORITE_OS,{keyPath:"id"})}):console.log("This browser doesn't support IndexedDB")}static storeInIndexDB(e,t){dbPromise.then(r=>{if(!r)return;let n=r.transaction(e,"readwrite"),i=n.objectStore(e);return t.forEach(e=>{i.put(e)}),n.complete}).then(()=>{console.log("Data Added to IDB")})}static fetchRestaurants(e){if(!1!==navigator.onLine)return fetch(`${this.DATABASE_URL}/restaurants`,{method:"GET"}).then(e=>e.json()).then(t=>{DBHelper.storeInIndexDB(RESTAURANT_OS,t),e(null,t)});dbPromise.then(t=>{if(!t)return;return t.transaction(RESTAURANT_OS).objectStore(RESTAURANT_OS).getAll().then(t=>{e(null,t)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,i)=>{if(n)r(n,null);else{let n=i;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchReviews(e,t){if(!1!==navigator.onLine)return fetch(`${this.DATABASE_URL}/reviews/?restaurant_id=${e}`,{method:"GET"}).then(e=>e.json()).then(e=>{DBHelper.storeInIndexDB(REVIEW_OS,e),t(e)});dbPromise.then(e=>{if(!e)return;return e.transaction(REVIEW_OS).objectStore(REVIEW_OS).getAll().then(e=>{DBHelper.getOfflinePosts(r=>{t(r?e.concat(r):e)})})})}static fetchReviewByRestaurantId(e,t){DBHelper.fetchReviews(e,r=>{const n=r.filter(t=>t.restaurant_id==e);t(n)})}static storeOfflinePosts(e){dbPromise.then(t=>{if(!t)return;let r=t.transaction(OFFLINE_REVIEW_OS,"readwrite");return r.objectStore(OFFLINE_REVIEW_OS).add(e),r.complete}).then(()=>{console.log("Offline Review Added")})}static getOfflinePosts(e){dbPromise.then(t=>{if(!t)return;return t.transaction(OFFLINE_REVIEW_OS).objectStore(OFFLINE_REVIEW_OS).getAll().then(t=>{e(t)})})}static deleteOfflinePosts(){navigator.onLine&&dbPromise.then(e=>{if(!e)return;let t=e.transaction(OFFLINE_REVIEW_OS,"readwrite");return t.objectStore(OFFLINE_REVIEW_OS).clear(),t.complete}).then(()=>{console.log("Offline Reviews deleted")})}static postReview(e){if(!1!==navigator.onLine)return fetch(`${this.DATABASE_URL}/reviews/`,{method:"POST",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{DBHelper.storeInIndexDB(REVIEW_OS,e)});DBHelper.storeOfflinePosts(e)}static storeOfflineFavorites(e,t){dbPromise.then(r=>{if(!r)return;let n=r.transaction(OFFLINE_FAVORITE_OS,"readwrite"),i=n.objectStore(OFFLINE_FAVORITE_OS),o={id:e,is_favorite:t};return i.put(o),n.complete}).then(()=>{console.log("Offline Favorite Added")})}static getOfflineFavorites(e){dbPromise.then(t=>{if(!t)return;return t.transaction(OFFLINE_FAVORITE_OS).objectStore(OFFLINE_FAVORITE_OS).getAll().then(t=>{e(t)})})}static deleteOfflineFavorites(){navigator.onLine&&dbPromise.then(e=>{if(!e)return;let t=e.transaction(OFFLINE_FAVORITE_OS,"readwrite");return t.objectStore(OFFLINE_FAVORITE_OS).clear(),t.complete}).then(()=>{console.log("Offline Favorites deleted")})}static toggleFavorite(e){if(!1!==navigator.onLine)return fetch(`${this.DATABASE_URL}/restaurants/${e.id}/?is_favorite=${e.is_favorite}`,{method:"PUT"}).then(e=>e.json().then(e=>{DBHelper.storeInIndexDB(RESTAURANT_OS,e)}));DBHelper.storeOfflineFavorites(e.id,e.is_favorite),dbPromise.then(t=>{if(!t)return;let r=t.transaction(RESTAURANT_OS,"readwrite");return r.objectStore(RESTAURANT_OS).put(e),r.complete}).then(()=>{console.log("Favorite updated in IDB")})}static updateFavorite(e,t){t.is_favorite?(e.setAttribute("aria-label",`Remove ${t.name} from favorites`),e.style.backgroundImage=`url(${DBHelper.favoriteSVG()})`):(e.setAttribute("aria-label",`Add ${t.name} to favorites`),e.style.backgroundImage=`url(${DBHelper.notFavoriteSVG()})`)}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/dist/img/${e.photograph}.webp`}static notFavoriteSVG(){return"/icons/like-outline.svg"}static favoriteSVG(){return"/icons/like-fill.svg"}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,url:DBHelper.urlForRestaurant(e),map:t,icon:"https://maps.google.com/mapfiles/ms/icons/blue-dot.png",title:e.name,animation:google.maps.Animation.DROP})}}